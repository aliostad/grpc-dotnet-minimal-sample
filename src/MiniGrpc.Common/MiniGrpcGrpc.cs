// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MiniGrpc.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace MiniGrpc.Common {
  /// <summary>
  /// MiniGrpc service
  /// </summary>
  public static partial class MiniService
  {
    static readonly string __ServiceName = "MiniGrpc.Common.MiniService";

    static readonly grpc::Marshaller<global::MiniGrpc.Common.AddRequest> __Marshaller_AddRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MiniGrpc.Common.AddRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MiniGrpc.Common.AddResponse> __Marshaller_AddResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MiniGrpc.Common.AddResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MiniGrpc.Common.Position> __Marshaller_Position = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MiniGrpc.Common.Position.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MiniGrpc.Common.Note> __Marshaller_Note = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MiniGrpc.Common.Note.Parser.ParseFrom);

    static readonly grpc::Method<global::MiniGrpc.Common.AddRequest, global::MiniGrpc.Common.AddResponse> __Method_Add = new grpc::Method<global::MiniGrpc.Common.AddRequest, global::MiniGrpc.Common.AddResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Add",
        __Marshaller_AddRequest,
        __Marshaller_AddResponse);

    static readonly grpc::Method<global::MiniGrpc.Common.Position, global::MiniGrpc.Common.Note> __Method_ReportPosition = new grpc::Method<global::MiniGrpc.Common.Position, global::MiniGrpc.Common.Note>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "ReportPosition",
        __Marshaller_Position,
        __Marshaller_Note);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MiniGrpc.Common.MiniGrpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MiniService</summary>
    public abstract partial class MiniServiceBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MiniGrpc.Common.AddResponse> Add(global::MiniGrpc.Common.AddRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// report position
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MiniGrpc.Common.Note> ReportPosition(grpc::IAsyncStreamReader<global::MiniGrpc.Common.Position> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MiniService</summary>
    public partial class MiniServiceClient : grpc::ClientBase<MiniServiceClient>
    {
      /// <summary>Creates a new client for MiniService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MiniServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MiniService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MiniServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MiniServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MiniServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MiniGrpc.Common.AddResponse Add(global::MiniGrpc.Common.AddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Add(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MiniGrpc.Common.AddResponse Add(global::MiniGrpc.Common.AddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Add, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MiniGrpc.Common.AddResponse> AddAsync(global::MiniGrpc.Common.AddRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MiniGrpc.Common.AddResponse> AddAsync(global::MiniGrpc.Common.AddRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Add, null, options, request);
      }
      /// <summary>
      /// report position
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::MiniGrpc.Common.Position, global::MiniGrpc.Common.Note> ReportPosition(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ReportPosition(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// report position
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::MiniGrpc.Common.Position, global::MiniGrpc.Common.Note> ReportPosition(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_ReportPosition, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MiniServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MiniServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MiniServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add, serviceImpl.Add)
          .AddMethod(__Method_ReportPosition, serviceImpl.ReportPosition).Build();
    }

  }
}
#endregion
